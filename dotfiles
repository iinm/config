#!/usr/bin/env bash

SOURCE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

help() {
  cat << 'HELP'
Usage: dotfiles COMMAND

  setup           Run all following commands
  bootstrap       Install essential utilities
  link            Create symlink to dotfiles
  setup_fish      Setup fish shell
  setup_nvim      Setup neovim
  setup_git       Setup git
  setup_wezterm   Setup wezterm

  ---
  setup_chrome    Setup Chrome startup options. (Linux only)
HELP
}

setup() {
  bootstrap
  link
  setup_fish
  setup_nvim
  setup_git
  # setup_vim
  setup_wezterm
}

bootstrap() {
  if test -e /etc/pacman.conf; then
    bootstrap_archlinux
  elif test "$(lsb_release -is 2> /dev/null)" = "Ubuntu"; then
    bootstrap_ubuntu
  elif test "$(uname)" = "Darwin"; then
    bootstrap_darwin
  else
    echo "error: Unsupported platform"
    exit 1
  fi
}

bootstrap_archlinux() {
  local packages=(
    base-devel
    man
    fish
    tmux
    git
    ripgrep
    fd
    fzf
    jq
    xsel
    shellcheck
  )
  local missing_packages=()
  for package in "${packages[@]}"; do
    pacman -Qi "$package" &> /dev/null || missing_packages+=("$package")
  done

  if test "${#missing_packages[@]}" -eq 0; then
    echo "skip: all required packages are installed."
  else
    echo "run: install ${missing_packages[*]}"
    sudo pacman --noconfirm -Sy "${missing_packages[@]}"
  fi
}

bootstrap_ubuntu() {
  if test -e /etc/apt/sources.list.d/fish-shell-ubuntu-release-3-*.list; then
    echo "skip: fish PPA is already enabled."
  else
    echo "run: enable fish PPA."
    sudo apt-add-repository ppa:fish-shell/release-3 -y
    sudo apt purge -y fish || true
  fi

  local packages=(
    fish
    tmux
    git
    neovim
    make
    ripgrep
    fd-find
    fzf
    curl
    jq
    xsel
    shellcheck
  )
  local missing_packages=()
  for package in "${packages[@]}"; do
    dpkg --status "$package" &> /dev/null || missing_packages+=("$package")
  done

  if test "${#missing_packages[@]}" -eq 0; then
    echo "skip: all required packages are installed."
  else
    echo "run: install ${missing_packages[*]}"
    sudo apt update
    sudo apt install -y "${missing_packages[@]}"
  fi

  local fd_path=~/tools/bin/fd
  if test -e "$fd_path"; then
    echo "skip: fd is already linked."
  else
    echo "run: link fd to $fd_path"
    mkdir -p ~/tools/bin
    ln -s "$(which fdfind)" "$fd_path"
  fi

  local nvim_path=~/tools/nvim
  if test -e "$nvim_path"; then
    echo "skip: $nvim_path exists."
  else
    echo "run: install nvim."
    mkdir -p ~/tools
    curl --show-error --fail -L \
      https://github.com/neovim/neovim/releases/download/stable/nvim-linux64.tar.gz \
      | tar -C ~/tools -xzf -
    ln -s nvim-linux64 "$nvim_path"
  fi
}

bootstrap_darwin() {
 local packages=(
    fish
    tmux
    ripgrep
    fd
    fzf
    jq
    shellcheck
    colima
    docker
    docker-compose
  )
  local missing_packages=()
  for package in "${packages[@]}"; do
    brew list "$package" &> /dev/null || missing_packages+=("$package")
  done

  if test "${#missing_packages[@]}" -eq 0; then
    echo "skip: all required packages are installed."
  else
    echo "run: install ${missing_packages[*]}"
    brew install "${missing_packages[@]}"
  fi

  local nvim_path=~/tools/nvim
  if test -e "$nvim_path"; then
    echo "skip: $nvim_path exists."
  else
    echo "run: install nvim."
    mkdir -p ~/tools
    curl --show-error --fail -L \
      https://github.com/neovim/neovim/releases/download/stable/nvim-macos.tar.gz \
      | tar -C ~/tools -xzf -
    ln -s nvim-macos "$nvim_path"
  fi
}

link() {
  mkdir -p ~/.config
  for src in $(
    # ~/.*
    find "$SOURCE_DIR" -maxdepth 1 -type f -name '.*';
    # ~/.config/*
    find "$SOURCE_DIR/.config" -mindepth 1 -maxdepth 1 -type d;
  ); do
    # shellcheck disable=SC2001
    dest=$(sed "s,^$SOURCE_DIR,$HOME," <<< "$src")
    if file -E "$dest" > /dev/null; then
      echo "skip: $dest is already exist."
      continue
    fi
    echo "run: create symlink: $dest -> $src"
    ln -s "$src" "$dest"
  done
}

setup_fish() {
  local fish_local_config=~/.config/fish/functions/local_config.fish
  if test -e "$fish_local_config"; then
    echo "skip: $fish_local_config exists."
  else
    echo "run: create $fish_local_config"
    cat > "$fish_local_config" << 'EOF'
function local_config --description "Host specific configuration"
  function local_config_first
    # fish_add_path -g /path/to/bin
  end

  function local_config_last
  end

  function project_config_on_pwd_change --on-variable PWD --description "Project specific configuration"
    if string match -rq "/path/to/project" "$PWD"
      # fish_add_path -g $HOME/tools/bin
      # set -g -x PROJECT_ROOT $PWD
    end
  end

  cd $PWD
end
EOF
  fi

  if (finger "$USER" || pinky -l "$USER") | grep -q "$(which fish)"; then
    echo "skip: fish is default shell."
  else
    echo "run: set fish as default shell."
    sudo chsh "$(id -un)" -s "$(which fish)"
  fi
}

setup_nvim() {
  local nvim_local_config=~/.config/nvim/lua/local_config.lua
  if test -e "$nvim_local_config"; then
    echo "skip: $nvim_local_config exists."
  else
    echo "run: create $nvim_local_config"
    mkdir -p "$(dirname "$nvim_local_config")"
    cat > "$nvim_local_config" << 'EOF'
local cwd = vim.fn.getcwd()

if string.find(cwd, '/path/to/project') then
  print('local_config.lua: load project config')
  return {}
end

return {
  dap_configurations = nil,
  null_ls_sources = nil,
}
EOF
  fi
}

setup_git() {
  if grep -q "gitconfig-global" ~/.gitconfig; then
    echo "skip: git config enabled."
  else
    echo "run: enable git config."
    echo -e "\n[include]\n\tpath = ~/.gitconfig-global" >> ~/.gitconfig
  fi
}

setup_vim() {
  if test -e ~/.vim/autoload/plug.vim; then
    echo "skip: vim-plug exists."
  else
    echo "run: install vim-plug."
    curl --show-error --fail -o ~/.vim/autoload/plug.vim --create-dirs \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    vim -u NONE -c 'silent! source ~/.vimrc' -c 'PlugInstall' -c 'qa!'
  fi

  local vim_local_config=~/.local.vim
  if test -e "$vim_local_config"; then
    echo "skip: $vim_local_config exists."
  else
    echo "run: create $vim_local_config"
    cat > "$vim_local_config" << 'EOF'
" if getcwd() == expand('~/projects/foo')
" endif
EOF
  fi

  local efm_langserver_version=0.0.44
  if test -e ~/tools/bin/efm-langserver; then
    echo "skip: efm-langserver exists."
  else
    echo "run: install efm-langserver."
    mkdir -p ~/tools/bin
    rm -rf /tmp/efm-langserver_v*
    local base_url="https://github.com/mattn/efm-langserver/releases/download"
    if test "$(uname)" = "Linux"; then
      curl -L --show-error --fail \
        "${base_url}/v${efm_langserver_version}/efm-langserver_v${efm_langserver_version}_linux_amd64.tar.gz" \
        | tar -zxf - -C /tmp
      mv /tmp/efm-langserver_v${efm_langserver_version}_linux_amd64/efm-langserver ~/tools/bin
    fi
    if test "$(uname)" = "Darwin"; then
      curl -L --show-error --fail \
        -o /tmp/efm-langserver_v${efm_langserver_version}.zip \
        "${base_url}/v${efm_langserver_version}/efm-langserver_v${efm_langserver_version}_darwin_arm64.zip"
      unzip /tmp/efm-langserver_v${efm_langserver_version}.zip -d /tmp
      mv /tmp/efm-langserver_v${efm_langserver_version}_darwin_arm64/efm-langserver ~/tools/bin
    fi
  fi
}

setup_wezterm() {
  local local_config=~/.config/wezterm/local_config.lua
  if test -e "$local_config"; then
    echo "skip: $local_config exists."
  else
    echo "run: create $local_config"
    cat > "$local_config" << 'EOF'
local module = {}

function module.apply_to_config(config)
  -- config.font_size = 12
end

return module
EOF
  fi

  # https://wezfurlong.org/wezterm/faq.html#how-do-i-enable-undercurl-curly-underlines
  if test -d ~/.terminfo && find ~/.terminfo -name wezterm | grep -q wezterm; then
    echo "skip: wezterm terminfo exists."
  else
    echo "run: install wezterm terminfo."
    local tempfile
    tempfile=$(mktemp)
    curl --show-error --fail -L -o "$tempfile" \
      https://raw.githubusercontent.com/wez/wezterm/main/termwiz/data/wezterm.terminfo
    tic -x -o ~/.terminfo "$tempfile"
    rm "$tempfile"
  fi
}

setup_chrome() {
  local original_desktop_entry=/usr/share/applications/google-chrome.desktop
  local desktop_entry=~/.local/share/applications/google-chrome.desktop

  echo "run: create chrome desktop entry. $desktop_entry"
  local options=(
    --force-device-scale-factor=1.15
    # --enable-features=UseOzonePlatform
    # --ozone-platform=wayland
  )
  sed -E "s,^(Exec=[^ ]+)(.*),\\1 ${options[*]}\\2,g" \
    < "$original_desktop_entry" \
    > "$desktop_entry"
}

if test "${BASH_SOURCE[0]}" = "$0"; then
  set -eu -o pipefail

  if test "$#" -eq 0; then
    help
    exit 1
  fi

  "$@"
fi

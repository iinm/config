#!/usr/bin/env bash

SOURCE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

help() {
  cat << 'HELP'
Usage: dotfiles COMMAND

  setup           Run all following commands
  bootstrap       Install essential utilities
  link            Create symlink to dotfiles
  setup_fish      Setup fish shell
  setup_git       Setup git
  setup_vim       Setup vim
HELP
}

setup() {
  bootstrap
  link
  setup_fish
  setup_git
  setup_vim
}

bootstrap() {
  if test "$(lsb_release -is 2> /dev/null)" = "Ubuntu"; then
    if test -e /etc/apt/sources.list.d/fish-shell-ubuntu-release-3-*.list; then
      echo "info: fish PPA is already enabled. skip."
    else
      echo "info: enable fish PPA."
      sudo apt-add-repository ppa:fish-shell/release-3 -y
      sudo apt purge -y fish || true
    fi

    if test -e /etc/apt/sources.list.d/jonathonf-ubuntu-vim-*.list; then
      echo "info: vim PPA is already enabled. skip."
    else
      echo "info: enable vim PPA."
      sudo apt-add-repository ppa:jonathonf/vim -y
      sudo apt purge -y vim || true
    fi

    local packages=(
      fish
      vim-gtk
      tmux
      git
      make
      ripgrep
      fd-find
      fzf
      direnv
      curl
      jq
      xsel
      finger
      shellcheck
      # https://github.com/vim/vim/blob/master/src/INSTALL
      clang
      libtool-bin
      libxt-dev
    )
    local missing_packages=()
    for package in "${packages[@]}"; do
      dpkg --status "$package" &> /dev/null || missing_packages+=("$package")
    done

    if test "${#missing_packages[@]}" -eq 0; then
      echo "info: all required packages are installed. skip."
    else
      echo "info: install ${missing_packages[*]}"
      sudo apt update
      sudo apt install -y "${missing_packages[@]}"
    fi

    if test -e ~/tools/bin/fd; then
      echo "info: fd is already linked. skip."
    else
      echo "info: link fd to ~/tools/bin/fd"
      mkdir -p ~/tools/bin
      ln -s "$(which fdfind)" ~/tools/bin/fd
    fi

  elif test "$(uname)" = "Darwin"; then
    local packages=(
      fish
      vim
      tmux
      ripgrep
      fd
      fzf
      direnv
      jq
      shellcheck
      colima
      docker
      docker-compose
    )
    local missing_packages=()
    for package in "${packages[@]}"; do
      brew list "$package" &> /dev/null || missing_packages+=("$package")
    done

    if test "${#missing_packages[@]}" -eq 0; then
      echo "info: all required packages are installed. skip."
    else
      echo "info: install ${missing_packages[*]}"
      brew install "${missing_packages[@]}"
    fi

  else
    echo "error: Unsupported platform"
    exit 1
  fi
}

link() {
  for src in $(
    # ~/.*
    find "$SOURCE_DIR" -maxdepth 1 -type f -name '.*';
    # ~/.config/*
    find "$SOURCE_DIR/.config" -mindepth 1 -maxdepth 1 -type d;
  ); do
    # shellcheck disable=SC2001
    dest=$(sed "s,^$SOURCE_DIR,$HOME," <<< "$src")
    if file -E "$dest" > /dev/null; then
      echo "info: $dest is already exist. skip."
      continue
    fi
    echo "info: create symlink: $dest -> $src"
    ln -s "$src" "$dest"
  done
}

setup_fish() {
  local fish_local_config=~/.config/fish/functions/config_local.fish
  if test -e "$fish_local_config"; then
    echo "info: $fish_local_config exists. skip."
  else
    echo "info: create $fish_local_config"
    cat > "$fish_local_config" << 'EOF'
function config_local --description "Host specific configuration"
  function config_local_first
    # fish_add_path
  end

  function config_local_last
  end
end
EOF
  fi

  if finger "$USER" | grep -q "$(which fish)"; then
    echo "info: fish is default shell. skip."
  else
    echo "info: set fish as default shell."
    sudo chsh "$(id -un)" -s "$(which fish)"
  fi
}

setup_git() {
  if grep -q "gitconfig-global" ~/.gitconfig; then
    echo "info: git config enabled. skip."
  else
    echo "info: enable git config."
    echo -e "\n[include]\n\tpath = ~/.gitconfig-global" >> ~/.gitconfig
  fi
}

setup_vim() {
  if test -e ~/.vim/autoload/plug.vim; then
    echo "info: vim-plug exists. skip."
  else
    echo "info: install vim-plug."
    curl --show-error --fail -o ~/.vim/autoload/plug.vim --create-dirs \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    vim -u NONE -c 'silent! source ~/.vimrc' -c 'PlugInstall' -c 'qa!'
  fi

  if test -e ~/.local.vim; then
    echo "info: ~/.local.vim exists. skip."
  else
    echo "info: create ~/.local.vim"
    cat > ~/.local.vim << 'EOF'
" if getcwd() == expand('~/projects/foo')
" endif
EOF
  fi

  local efm_langserver_version=0.0.44
  if test -e ~/tools/bin/efm-langserver; then
    echo "info: efm-langserver exists. skip."
  else
    echo "info: install efm-langserver."
    mkdir -p ~/tools/bin
    rm -rf /tmp/efm-langserver_v*
    local base_url="https://github.com/mattn/efm-langserver/releases/download"
    if test "$(uname)" = "Linux"; then
      curl -L --show-error --fail \
        "${base_url}/v${efm_langserver_version}/efm-langserver_v${efm_langserver_version}_linux_amd64.tar.gz" \
        | tar -zxf - -C /tmp
      mv /tmp/efm-langserver_v${efm_langserver_version}_linux_amd64/efm-langserver ~/tools/bin
    fi
    if test "$(uname)" = "Darwin"; then
      curl -L --show-error --fail \
        -o /tmp/efm-langserver_v${efm_langserver_version}.zip \
        "${base_url}/v${efm_langserver_version}/efm-langserver_v${efm_langserver_version}_darwin_arm64.zip"
      unzip /tmp/efm-langserver_v${efm_langserver_version}.zip -d /tmp
      mv /tmp/efm-langserver_v${efm_langserver_version}_darwin_arm64/efm-langserver ~/tools/bin
    fi
  fi
}

if test "${BASH_SOURCE[0]}" = "$0"; then
  set -eu -o pipefail

  if test "$#" -eq 0; then
    help
    exit 1
  fi

  "$@"
fi

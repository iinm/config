#!/usr/bin/env bash

NVIM_VERSION=0.10.0
EFM_LS_VERSION=0.0.53

SOURCE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

help() {
  cat << 'HELP'
Usage: dotfiles COMMAND

Commands:
  setup           Run all setup commands
  bootstrap       Install essential utilities
  link            Create symlink to dotfiles
  setup_fish      Setup fish shell
  setup_nvim      Setup neovim
  setup_git       Setup git
  setup_wezterm   Setup wezterm

Optional commands:
  setup_chrome    Setup Chrome startup options. (Linux only)
HELP
}

setup() {
  bootstrap
  link
  setup_fish
  setup_nvim
  setup_git
  setup_wezterm
}

bootstrap() {
  if test -e /etc/pacman.conf; then
    bootstrap_archlinux
  elif test "$(lsb_release -is 2> /dev/null)" = "Debian"; then
    bootstrap_debian
  elif test "$(lsb_release -is 2> /dev/null)" = "Ubuntu"; then
    bootstrap_ubuntu
  elif test "$(uname)" = "Darwin"; then
    bootstrap_darwin
  else
    echo "error: Unsupported platform"
    exit 1
  fi
}

bootstrap_archlinux() {
  local packages=(
    base-devel
    man
    fish
    tmux
    git
    ripgrep
    fd
    fzf
    jq
    xsel
    gnu-netcat
    whois
    lua-language-server
  )
  local missing_packages=()
  for package in "${packages[@]}"; do
    pacman -Qi "$package" &> /dev/null || missing_packages+=("$package")
  done

  if test "${#missing_packages[@]}" -eq 0; then
    echo "skip: all required packages are installed."
  else
    echo "run: install ${missing_packages[*]}"
    sudo pacman --noconfirm -Sy "${missing_packages[@]}"
  fi
}

bootstrap_debian() {
  local packages=(
    fish
    tmux
    git
    make
    build-essential
    ripgrep
    fd-find
    fzf
    curl
    jq
    xsel
    shellcheck
  )
  local missing_packages=()
  for package in "${packages[@]}"; do
    dpkg --status "$package" &> /dev/null || missing_packages+=("$package")
  done

  if test "${#missing_packages[@]}" -eq 0; then
    echo "skip: all required packages are installed."
  else
    echo "run: install ${missing_packages[*]}"
    sudo apt update
    sudo apt install -y "${missing_packages[@]}"
  fi

  local fd_path=~/tools/bin/fd
  if test -e "$fd_path"; then
    echo "skip: fd is linked."
  else
    echo "run: link fd to $fd_path"
    mkdir -p ~/tools/bin
    ln -s "$(which fdfind)" "$fd_path"
  fi
}

bootstrap_ubuntu() {
  if lsb_release -r | grep -qE "20.04"; then
    if test -e /etc/apt/sources.list.d/fish-shell-ubuntu-release-3-*.list; then
      echo "skip: fish PPA is enabled."
    else
      echo "run: enable fish PPA."
      sudo apt-add-repository ppa:fish-shell/release-3 -y
      sudo apt purge -y fish || true
    fi
  fi

  local packages=(
    fish
    tmux
    git
    make
    build-essential
    ripgrep
    fd-find
    fzf
    curl
    jq
    xsel
    shellcheck
  )
  local missing_packages=()
  for package in "${packages[@]}"; do
    dpkg --status "$package" &> /dev/null || missing_packages+=("$package")
  done

  if test "${#missing_packages[@]}" -eq 0; then
    echo "skip: all required packages are installed."
  else
    echo "run: install ${missing_packages[*]}"
    sudo apt update
    sudo apt install -y "${missing_packages[@]}"
  fi

  local fd_path=~/tools/bin/fd
  if test -e "$fd_path"; then
    echo "skip: fd is linked."
  else
    echo "run: link fd to $fd_path"
    mkdir -p ~/tools/bin
    ln -s "$(which fdfind)" "$fd_path"
  fi
}

bootstrap_darwin() {
 local packages=(
    fish
    tmux
    ripgrep
    fd
    fzf
    jq
    shellcheck
    colima
    docker
    docker-compose
    lua-language-server
    csvq
  )
  local missing_packages=()
  for package in "${packages[@]}"; do
    brew list "$package" &> /dev/null || missing_packages+=("$package")
  done

  if test "${#missing_packages[@]}" -eq 0; then
    echo "skip: all required packages are installed."
  else
    echo "run: install ${missing_packages[*]}"
    brew install "${missing_packages[@]}"
  fi
}

link() {
  mkdir -p ~/.config
  for src in $(
    # ~/.*
    find "$SOURCE_DIR" -maxdepth 1 -type f -name '.*';
    # ~/.config/*
    find "$SOURCE_DIR/.config" -mindepth 1 -maxdepth 1 -type d;
  ); do
    # shellcheck disable=SC2001
    dest=$(sed "s,^$SOURCE_DIR,$HOME," <<< "$src")
    if file -E "$dest" > /dev/null; then
      echo "skip: $dest exists."
      continue
    fi
    echo "run: create symlink: $dest -> $src"
    ln -s "$src" "$dest"
  done
}

setup_fish() {
  local fish_local_config=~/.config/fish/functions/local_config.fish
  if test -e "$fish_local_config"; then
    echo "skip: $fish_local_config exists."
  else
    echo "run: create $fish_local_config"
    cat > "$fish_local_config" << 'EOF'
function local_config --description "Host specific configuration"
  function local_config_first
    # fish_add_path /path/to/bin
  end

  function local_config_last
  end

  function project_config_on_pwd_change --on-variable PWD --description "Project specific configuration"
    if string match -rq "/path/to/project" "$PWD"
      # fish_add_path -m $HOME/tools/bin
      # set -x PROJECT_ROOT $PWD
    end
  end

  cd $PWD
end
EOF
  fi

  if (finger "$USER" 2> /dev/null || pinky -l "$USER") | grep -q "$(which fish)"; then
    echo "skip: fish is default shell."
  else
    echo "run: set fish as default shell."
    sudo chsh "$(id -un)" -s "$(which fish)"
  fi
}

setup_nvim() {
  local nvim_path=~/tools/nvim
  if $nvim_path/bin/nvim -v 2> /dev/null | grep -qE "$NVIM_VERSION"; then
    echo "skip: $nvim_path $NVIM_VERSION exists."
  else
    echo "run: install nvim."
    rm -rf ~/tools/nvim*
    mkdir -p ~/tools

    local nvim_base_url=https://github.com/neovim/neovim/releases/download/v$NVIM_VERSION
    if test "$(uname)" = "Linux"; then
      curl --show-error --fail -L $nvim_base_url/nvim-linux64.tar.gz \
        | tar -C ~/tools -xzf -
      ln -s nvim-linux64 "$nvim_path"
    fi

    if test "$(uname)" = "Darwin"; then
      curl --show-error --fail -L $nvim_base_url/nvim-macos-arm64.tar.gz \
        | tar -C ~/tools -xzf -
      ln -s nvim-macos-arm64 "$nvim_path"
    fi
  fi

  local nvim_local_config=~/.config/nvim/lua/local_config.lua
  if test -e "$nvim_local_config"; then
    echo "skip: $nvim_local_config exists."
  else
    echo "run: create $nvim_local_config"
    mkdir -p "$(dirname "$nvim_local_config")"
    cat > "$nvim_local_config" << 'EOF'
local cwd = vim.fn.getcwd()

local default = {
  lsp_format_clients = nil,
  efm_settings = nil,
  dap_configurations = nil,
  lemminx_settings = nil,
  typescript_tools = nil,
}

if string.find(cwd, '/path/to/project') then
  print('local_config.lua: load project config')
  return vim.tbl_deep_extend('force', default, {})
end

return default
EOF
  fi

  local efm_ls_path=~/tools/bin/efm-langserver
  if $efm_ls_path -v 2> /dev/null | grep -qE "$EFM_LS_VERSION"; then
    echo "skip: efm-langserver $EFM_LS_VERSION exists."
  else
    echo "run: install efm-langserver."
    mkdir -p "$(dirname "$efm_ls_path")"
    rm -rf $efm_ls_path
    rm -rf /tmp/efm-langserver_v*
    local base_url="https://github.com/mattn/efm-langserver/releases/download"
    if test "$(uname)" = "Linux"; then
      curl -L --show-error --fail \
        "${base_url}/v${EFM_LS_VERSION}/efm-langserver_v${EFM_LS_VERSION}_linux_amd64.tar.gz" \
        | tar -zxf - -C /tmp
      mv /tmp/efm-langserver_v${EFM_LS_VERSION}_linux_amd64/efm-langserver $efm_ls_path
    fi
    if test "$(uname)" = "Darwin"; then
      curl -L --show-error --fail \
        -o /tmp/efm-langserver_v${EFM_LS_VERSION}.zip \
        "${base_url}/v${EFM_LS_VERSION}/efm-langserver_v${EFM_LS_VERSION}_darwin_arm64.zip"
      unzip /tmp/efm-langserver_v${EFM_LS_VERSION}.zip -d /tmp
      mv /tmp/efm-langserver_v${EFM_LS_VERSION}_darwin_arm64/efm-langserver $efm_ls_path
    fi
  fi
}

setup_git() {
  if grep -q "gitconfig-global" ~/.gitconfig; then
    echo "skip: git config enabled."
  else
    echo "run: enable git config."
    echo -e "\n[include]\n\tpath = ~/.gitconfig-global" >> ~/.gitconfig
  fi
}

setup_wezterm() {
  local local_config=~/.config/wezterm/local_config.lua
  if test -e "$local_config"; then
    echo "skip: $local_config exists."
  else
    echo "run: create $local_config"
    cat > "$local_config" << 'EOF'
local module = {}

function module.apply_to_config(config)
  -- config.font_size = 12
end

return module
EOF
  fi
}

setup_chrome() {
  local original_desktop_entry=/usr/share/applications/google-chrome.desktop
  local desktop_entry=~/.local/share/applications/google-chrome.desktop

  echo "run: create chrome desktop entry. $desktop_entry"
  local options=(
    --force-device-scale-factor=1.15
    # --enable-features=UseOzonePlatform
    # --ozone-platform=wayland
  )
  sed -E "s,^(Exec=[^ ]+)(.*),\\1 ${options[*]}\\2,g" \
    < "$original_desktop_entry" \
    > "$desktop_entry"
}

if test "${BASH_SOURCE[0]}" = "$0"; then
  set -eu -o pipefail

  if test "$#" -eq 0; then
    help
    exit 1
  fi

  "$@"
fi

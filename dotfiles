#!/usr/bin/env bash

: "${LUA_VERSION:="5.4.4"}"
: "${VIM_VERSION:="v9.0.1274"}"

SOURCE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

LUA_DIR=~/tools/lua-$LUA_VERSION

help() {
  cat << 'HELP'
Usage: dotfiles COMMAND

  setup           Run all following commands
  bootstrap       Install essential utilities
  link            Create symlink to dotfiles
  setup_fish      Setup fish shell
  setup_git       Setup git
  setup_lua       Setup lua
  setup_vim       Setup vim
HELP
}

setup() {
  bootstrap
  link
  setup_fish
  setup_git
  setup_lua
  setup_vim
}

bootstrap() {
  if test "$(lsb_release -is 2> /dev/null)" = "Ubuntu"; then
    local packages=(
      fish
      tmux
      git
      make
      ripgrep
      fd-find
      fzf
      direnv
      curl
      jq
      xsel
      finger
      shellcheck
      efm-langserver
      # https://github.com/vim/vim/blob/master/src/INSTALL
      clang
      libtool-bin
      libxt-dev
    )
    local missing_packages=()
    for package in "${packages[@]}"; do
      dpkg --status "$package" &> /dev/null || missing_packages+=("$package")
    done

    if test "${#missing_packages[@]}" -eq 0; then
      echo "info: all required packages are installed. skip."
    else
      echo "info: install ${missing_packages[*]}"
      sudo apt install "${missing_packages[@]}"
    fi

    if test -e ~/.local/bin/fd; then
      echo "info: fd is already linked. skip."
    else
      echo "info: link fd to ~/.local/bin/fd"
      mkdir -p ~/.local/bin
      ln -s "$(which fdfind)" ~/.local/bin/fd
    fi

  elif test "$(uname)" = "Darwin"; then
    local packages=(
      fish
      tmux
      ripgrep
      fd
      fzf
      direnv
      jq
      shellcheck
      efm-langserver
    )
    local missing_packages=()
    for package in "${packages[@]}"; do
      brew list "$package" &> /dev/null || missing_packages+=("$package")
    done

    if test "${#missing_packages[@]}" -eq 0; then
      echo "info: all required packages are installed. skip."
    else
      echo "info: install ${missing_packages[*]}"
      brew install "${missing_packages[@]}"
    fi

  else
    echo "error: Unsupported platform"
    exit 1
  fi
}

link() {
  for src in $(
    # ~/.*
    find "$SOURCE_DIR" -maxdepth 1 -type f -name '.*';
    # ~/.config/*
    find "$SOURCE_DIR/.config" -mindepth 1 -maxdepth 1 -type d;
  ); do
    dest=$(sed "s,^$SOURCE_DIR,$HOME," <<< "$src")
    if file -E "$dest" > /dev/null; then
      echo "info: $dest is already exist. skip."
      continue
    fi
    echo "info: create symlink: $dest -> $src"
    ln -s "$src" "$dest"
  done
}

setup_fish() {
  local fish_local_config=~/.config/fish/functions/config_local.fish
  if test -e "$fish_local_config"; then
    echo "info: $fish_local_config exists. skip."
  else
    echo "info: create $fish_local_config"
    cat > "$fish_local_config" << 'EOF'
function config_local --description "Host specific configuration"
  function config_local_first
    # fish_add_path
  end

  function config_local_last
  end
end
EOF
  fi

  if finger "$USER" | grep -q "$(which fish)"; then
    echo "info: fish is default shell. skip."
  else
    echo "info: set fish as default shell."
    chsh -s "$(which fish)"
  fi
}

setup_git() {
  if grep -q "gitconfig-global" ~/.gitconfig; then
    echo "info: git config enabled. skip."
  else
    echo "info: enable git config."
    echo -e "\n[include]\n\tpath = ~/.gitconfig-global" >> ~/.gitconfig
  fi
}

setup_lua() {
  local lua_source_dir=~/tools/sources/lua-$LUA_VERSION

  if test -e "$lua_source_dir"; then
    echo "info: $lua_source_dir exists. skip."
  else
    echo "info: download lua source."
    curl --show-error --fail -o - \
      "https://www.lua.org/ftp/lua-$LUA_VERSION.tar.gz" \
      | tar xz -C ~/tools/sources
  fi

  if test -e "$LUA_DIR"; then
    echo "info: $LUA_DIR exists. skip."
  else
    echo "info: build lua.";
    (
      set -eu;
      cd "$lua_source_dir";
      make clean
      make all test
      make INSTALL_TOP="$LUA_DIR" install;
    )
  fi
}

setup_vim() {
  local vim_source_dir=~/tools/sources/vim
  local vim_dir=~/tools/vim

  if test -e "$vim_source_dir"; then
    echo "info: $vim_source_dir exists. skip."
  else
    echo "info: clone vim source."
    git clone --depth 1 --branch "$VIM_VERSION" https://github.com/vim/vim "$vim_source_dir"
  fi

  if test -e "$vim_dir"; then
    echo "info: $vim_dir exists. skip."
  else
    echo "info: build vim.";
    (
      set -eu;
      cd "$vim_source_dir/src";
      make distclean || true;
      ./configure --prefix="$vim_dir" --enable-luainterp=yes --with-lua-prefix="$LUA_DIR";
      make;
      make install;
    )
  fi

  if test -e ~/.vim/autoload/plug.vim; then
    echo "info: vim-plug exists. skip."
  else
    echo "info: install vim-plug."
    curl --show-error --fail -o ~/.vim/autoload/plug.vim --create-dirs \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  fi
}

if test "${BASH_SOURCE[0]}" = "$0"; then
  set -eu -o pipefail

  if test "$#" -eq 0; then
    help
    exit 1
  fi

  "$@"
fi

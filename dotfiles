#!/usr/bin/env bash

source_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

help() {
  cat << 'HELP'
Usage: dotfiles COMMAND

  setup         Run all following commands
  bootstrap     Install essential utilities
  link          Create symlink to dotfiles
  setup_fish    Configure fish shell
  setup_git     Configure git
HELP
}

setup() {
  bootstrap
  link
  setup_fish
  setup_git
}

bootstrap() {
  if test "$(lsb_release -is 2> /dev/null)" = "Ubuntu"; then
    local missing_packages=()
    which fish || missing_packages+=(fish)
    which tmux || missing_packages+=(tmux)
    which git || missing_packages+=(git)
    which rg || missing_packages+=(ripgrep)
    which fzf || missing_packages+=(fzf)
    which direnv || missing_packages+=(direnv)
    which zoxide || missing_packages+=(zoxide)
    which curl || missing_packages+=(curl)
    which jq || missing_packages+=(jq)
    which xsel || missing_packages+=(xsel)
    which efm-langserver || missing_packages+=(efm-langserver)
    which shellcheck || missing_packages+=(shellcheck)

    if test "${#missing_packages[@]}" -eq 0; then
      echo "info: all required packages are installed. skip." >&2
    else
      echo "info: install ${missing_packages[*]}" >&2
      sudo apt install "${missing_packages[@]}"
    fi

  elif test "$(uname)" = "Darwin"; then
    local missing_packages=()
    which fish || missing_packages+=(fish)
    which tmux || missing_packages+=(tmux)
    which git || missing_packages+=(git)
    which rg || missing_packages+=(ripgrep)
    which fzf || missing_packages+=(fzf)
    which direnv || missing_packages+=(direnv)
    which zoxide || missing_packages+=(zoxide)
    which curl || missing_packages+=(curl)
    which jq || missing_packages+=(jq)
    which nvim || missing_packages+=(neovim)
    which efm-langserver || missing_packages+=(efm-langserver)
    which shellcheck || missing_packages+=(shellcheck)

    if test "${#missing_packages[@]}" -eq 0; then
      echo "info: all required packages are installed. skip." >&2
    else
      echo "info: install ${missing_packages[*]}" >&2
      brew install "${missing_packages[@]}"
    fi

  else
    echo "error: Unsupported platform" >&2
    exit 1
  fi
}

link() {
  for src in $(
    # ~/.*
    find "$source_dir" -maxdepth 1 -type f -name '.*';
    # ~/.config/*
    find "$source_dir/.config" -mindepth 1 -maxdepth 1 -type d;
  ); do
    dest=$(sed "s,^$source_dir,$HOME," <<< "$src")
    if file -E "$dest" > /dev/null; then
      echo "info: $dest is already exist. skip." >&2
      continue
    fi
    ln -vs "$src" "$dest"
  done
}

setup_fish() {
  local fish_local_config=~/.config/fish/functions/config_local.fish
  if test -e "$fish_local_config"; then
    echo "info: $fish_local_config exists. skip." >&2
  else
    echo "info: create $fish_local_config" >&2
    cat > "$fish_local_config" << 'EOF'
function config_local --description "Host specific configuration"
  function config_local_first
    set -xg PATH \
      ~/.local/bin \
      $PATH
  end

  function config_local_last
  end
end
EOF
  fi

  local fish_fzf_keybindings=~/.config/fish/functions/fzf_key_bindings.fish
  if test -e "$fish_fzf_keybindings"; then
    echo "info: $fish_fzf_keybindings exists. skip." >&2
  else
    echo "info: donwload fish fzf key-bindings." >&2
    local fzf_verion
    fzf_verion="$(fzf --version | sed -E 's,^([0-9]+\.[0-9]+)\.?([0-9]+)?.*$,\1.\2,' | sed -E 's,^.+\.$,\00,')"
    curl --show-error --fail \
      "https://raw.githubusercontent.com/junegunn/fzf/$fzf_verion/shell/key-bindings.fish" \
      | sed 's,ct fzf-file-widget,cy fzf-file-widget,g' \
      > "$fish_fzf_keybindings" 
  fi

  if finger "$USER" | grep -q "$(which fish)"; then
    echo "info: fish is default shell. skip." >&2
  else
    echo "info: set fish as default shell." >&2
    chsh -s "$(which fish)"
  fi
}

setup_git() {
  if grep -q "gitconfig-global" ~/.gitconfig; then
    echo "info: git config enabled. skip." >&2
  else
    echo "info: enable git config." >&2
    echo -e "\n[include]\n\tpath = ~/.gitconfig-global" >> ~/.gitconfig
  fi
}

if test "${BASH_SOURCE[0]}" = "$0"; then
  set -eu -o pipefail

  if test "$#" -eq 0; then
    help
    exit 1
  fi

  "$@"
fi
